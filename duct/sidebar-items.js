initSidebarItems({"fn":[["cmd","Create a command given a program name and a collection of arguments. See also the `cmd!` macro, which doesn't require a collection."]],"macro":[["cmd","Create a command with any number of of positional arguments, which may be different types (anything that implements `Into<OsString>`). See also the `cmd` function, which takes a collection of arguments."]],"mod":[["unix","Unix-specific extensions to duct, for sending signals."]],"struct":[["Expression","The central objects in `duct`, Expressions are created with `cmd` or `cmd!`, combined with `pipe` or `then`, and finally executed with `start`, `run`, or `read`. They also support several methods to control their execution, like `input`, `env`, and `unchecked`."],["Handle","A handle to a running expression, returned by the `start` method. Calling `start` followed by `output` on the handle is equivalent to `run`. Note that unlike `std::process::Child`, most of the methods on `Handle` take `&self` rather than `&mut self`, and a `Handle` may be shared between multiple threads."]],"trait":[["ToExecutable","An implementation detail of `cmd`, to distinguish paths from other string types."]]});